@using Entities.Domains
@using Entities.Repositories
@using Services.BookServices
@using Services.ShoppingCartServices.ShopingCartViewModels
@model ShopingCartVM
@inject IUnitOfWork _unitOfWork

@{
    var bookRelated = await _unitOfWork.GetRepository<Book>().GetAllAsync(c => c.CategoryId == Model.shopingCart.Book.CategoryId && c.Id != Model.shopingCart.BookId);
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<form id="cartForm" method="post" asp-action="Detials">
    <section class="py-5">
        <div class="container px-4 px-lg-5 my-5">
            <div class="row gx-4 gx-lg-5 align-items-center">
                <input hidden asp-for="shopingCart.BookId" />
                <div class="col-md-6">
                    <img class="card-img-top mb-5 mb-md-0" src="~/covers/@(Model.shopingCart.Book.Cover ?? "default/banner-image.png")" alt="Book cover" style="border-radius: 10px;" />
                </div>
                <div class="col-md-6">
                    <div class="small mb-1 text-muted">Category: <span class="badge bg-secondary">@Model.shopingCart.Book.Category.Name</span></div>
                    <h1 class="display-5 fw-bolder text-primary">@Model.shopingCart.Book.Title</h1>
                    <p class="text-muted mb-1"><strong>Author:</strong> @(Model.shopingCart.Book.Author.Name)</p>
                    <p class="text-muted mb-3"><strong>Published on:</strong> @Model.shopingCart.Book.PublishedYear</p>
                    <div class="fs-5 mb-5">
                        <span class="text-success fw-bold">$@Model.shopingCart.Book.SalePrice Buy</span> |
                        <span class="text-info fw-bold">$@Model.shopingCart.Book.RentPrice Rent</span>
                    </div>
                    <p class="lead">@Html.Raw(Model.shopingCart.Book.Description)</p>

                    <div class="text-warning d-flex align-items-center mb-3">
                        @for (int i = 1; i <= 5; i++)
                        {
                            <i class="bi-star-fill @(i <= Model.RatingValue ? "text-warning" : "text-muted")"></i>
                        }
                    </div>
                    <div class="d-flex">
                        <input class="form-control text-center me-3" min="1" asp-for="shopingCart.Count" id="inputQuantity" style="max-width: 4rem; border-color: #6c757d;" />
                        <button type="button" class="btn btn-primary btn-lg shadow-sm" onclick="showPopup()">
                            <i class="bi-cart-fill me-1"></i>
                            Add to cart
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <input type="hidden" asp-for="shopingCart.IsBorrowed" id="isBorrowed" />
</form>

<div class="modal fade" id="cartOptionModal" tabindex="-1" aria-labelledby="cartOptionLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content shadow-lg">
            <div class="modal-header">
                <h5 class="modal-title" id="cartOptionLabel">
                    <i class="bi bi-basket-fill me-2"></i>Choose Your Option
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center p-4">
                <p class="fs-4 mb-4 text-muted">Would you like to buy or rent this book?</p>
                <div class="d-flex justify-content-center mb-4">
                    <button type="button" class="btn option-button me-2" onclick="selectOption(false)">
                        <i class="bi bi-currency-dollar me-1"></i> Buy
                    </button>
                    <button type="button" class="btn option-button ms-2" onclick="selectOption(true)">
                        <i class="bi bi-calendar2-check me-1"></i> Rent
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<section class="py-5 bg-light">
    <div class="container px-4 px-lg-5 mt-5">
        <h2 class="fw-bolder mb-4">Related books</h2>
        <div class="row gx-4 gx-lg-5 row-cols-2 row-cols-md-3 row-cols-xl-4 justify-content-center">
            @{
                foreach (var item in bookRelated)
                {
                    var rateValue = _unitOfWork.GetRepository<Rate>()
                    .GetAllAsync(b => b.BookId == item.Id)
                    .GetAwaiter()
                    .GetResult();
                    <div class="col mb-5">
                        <div class="card h-100">
                            <div class="badge bg-dark text-white position-absolute" style="top: 0.5rem; right: 0.5rem">Sale</div>
                            <a href="/Customer/Customer/Details/@item.Id"><img class="card-img-top" src="~/covers/@(item.Cover ?? "default/banner-image.png")" alt="..."></a>
                            <div class="card-body p-4">
                                <div class="text-center">
                                    <h5 class="fw-bolder">@item.Title</h5>
                                    <!-- Star Rating -->
                                    <div class="d-flex justify-content-center mb-2">
                                        @if (rateValue != null && rateValue.Count() != 0)
                                        {
                                            double avrage = rateValue.Average(x => x.Rating);
                                            for (int i = 0; i < Convert.ToInt32(avrage); i++)
                                            {
                                                <i class="bi-star-fill" style="color: #f1c40f;"></i>
                                            }
                                            if (avrage != 5)
                                            {
                                                for (int i = 0; i < (5 - Convert.ToInt32(avrage)); i++)
                                                {
                                                    <i class="bi-star" style="color: #ddd;"></i>
                                                }
                                            }
                                        }
                                        else
                                        {
                                            for (int i = 0; i < 5; i++)
                                            {
                                                <i class="bi-star" style="color: #ddd;"></i>
                                            }
                                        }
                                    </div>
                                    <p class="mb-1" style="font-size: 0.9em; color: #666;">Price For Sale: @item.SalePrice.ToString("C")</p>
                                    <p style="font-size: 0.9em; color: #666;">Price For Rent: @item.RentPrice.ToString("C")</p>
                                </div>
                            </div>
                            <div class="card-footer p-4 pt-0 border-top-0 bg-transparent">
                                <div class="text-center"><a class="btn btn-outline-dark mt-auto" href="/Customer/Home/Detials/@item.Id">Add to cart</a></div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</section>

<script>
    function showPopup() {
        var modal = new bootstrap.Modal(document.getElementById('cartOptionModal'));
        modal.show();
    }

    function selectOption(isBorrowed) {
        var quantity = document.getElementById('inputQuantity').value;
        var availableCopies = @Model.shopingCart.Book.Stock;

        if (availableCopies <= 0) {
            Swal.fire({
                icon: 'warning',
                title: 'No Copies Available',
                text: 'There are no copies of this book available at the moment.',
                confirmButtonText: 'OK'
            });
            return;
        }

        if (quantity > availableCopies) {
            Swal.fire({
                icon: 'error',
                title: 'Quantity Exceeds Availability',
                text: 'The requested quantity is greater than the available copies.',
                confirmButtonText: 'OK'
            });
            return;
        }

        document.getElementById('isBorrowed').value = isBorrowed;

        document.getElementById('cartForm').submit();
    }

    function rateBook(rating) {
        $.post('/Customer/RateBook', { bookId: @Model.shopingCart.Book.Id, rating: rating }, function (response) {
            if (response.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Thank you!',
                    text: 'Your rating has been submitted.',
                }).then(() => {
                    location.reload();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: response.message,
                });
            }
        });
    }
</script>

<style>
    .modal-content {
        border-radius: 15px;
        overflow: hidden;
        border: 2px solid #007bff;
        background: #ffffff;
    }

    .modal-header {
        background: linear-gradient(135deg, #007bff 0%, #6c757d 100%);
        border: none;
        color: #fff;
        border-top-left-radius: 15px;
        border-top-right-radius: 15px;
    }

    .modal-title {
        font-size: 1.5rem;
    }

    .option-button {
        background-color: #f8f9fa;
        border: 1px solid #007bff;
        border-radius: 5px;
        padding: 10px 20px;
        font-weight: bold;
        transition: background-color 0.3s, color 0.3s;
    }

        .option-button:hover {
            background-color: #007bff;
            color: #fff;
        }
</style>
